{"ast":null,"code":"var _jsxFileName = \"/Users/arjunkulkarni/Downloads/ramp-fe-challenge/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee(); // State to hold all loaded transactions\n\n  const [allTransactions, setAllTransactions] = useState([]);\n  const [isLoading, setIsLoading] = useState(false); // Memoized transactions based on current paginated or employee transactions\n\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : [];\n  }, [paginatedTransactions, transactionsByEmployee]); // Function to load and append new transactions\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    const newTransactions = await paginatedTransactionsUtils.fetchAll(); // Append new transactions to the existing ones\n\n    setAllTransactions(prevTransactions => {\n      var _newTransactions$data;\n\n      return [...prevTransactions, ...((_newTransactions$data = newTransactions === null || newTransactions === void 0 ? void 0 : newTransactions.data) !== null && _newTransactions$data !== void 0 ? _newTransactions$data : [])];\n    });\n    setIsLoading(false);\n  }, [paginatedTransactionsUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    const employeeTransactions = await transactionsByEmployeeUtils.fetchById(employeeId); // Replace the transactions when an employee is selected\n\n    setAllTransactions(employeeTransactions !== null && employeeTransactions !== void 0 ? employeeTransactions : []);\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        isLoading: isLoading,\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: async newValue => {\n          if (newValue === null || newValue.id === EMPTY_EMPLOYEE.id) {\n            // Load all transactions when \"All Employees\" is selected\n            await loadAllTransactions();\n          } else {\n            // Load transactions by employee when an employee is selected\n            await loadTransactionsByEmployee(newValue.id);\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: allTransactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), transactions !== null && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: isLoading,\n          onClick: async () => {\n            await loadAllTransactions(); // Load more transactions\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"9d+MUu4wM2/nTneCGJ6IURBNnC8=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","App","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","allTransactions","setAllTransactions","isLoading","setIsLoading","transactions","loadAllTransactions","newTransactions","fetchAll","prevTransactions","loadTransactionsByEmployee","employeeId","invalidateData","employeeTransactions","fetchById","loading","item","value","id","label","firstName","lastName","newValue"],"sources":["/Users/arjunkulkarni/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { Employee } from \"./utils/types\";\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees();\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions();\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee();\n  \n  // State to hold all loaded transactions\n  const [allTransactions, setAllTransactions] = useState<any[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Memoized transactions based on current paginated or employee transactions\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? [],\n    [paginatedTransactions, transactionsByEmployee]\n  );\n\n  // Function to load and append new transactions\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n\n    const newTransactions = await paginatedTransactionsUtils.fetchAll();\n    \n    // Append new transactions to the existing ones\n    setAllTransactions((prevTransactions) => [\n      ...prevTransactions,\n      ...(newTransactions?.data ?? []),\n    ]);\n\n    setIsLoading(false);\n  }, [paginatedTransactionsUtils]);\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string) => {\n      paginatedTransactionsUtils.invalidateData();\n      const employeeTransactions = await transactionsByEmployeeUtils.fetchById(employeeId);\n      \n      // Replace the transactions when an employee is selected\n      setAllTransactions(employeeTransactions ?? []);\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n  );\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          isLoading={isLoading}\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={async (newValue) => {\n            if (newValue === null || newValue.id === EMPTY_EMPLOYEE.id) {\n              // Load all transactions when \"All Employees\" is selected\n              await loadAllTransactions();\n            } else {\n              // Load transactions by employee when an employee is selected\n              await loadTransactionsByEmployee(newValue.id);\n            }\n          }}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          {/* Pass the combined transactions to the Transactions component */}\n          <Transactions transactions={allTransactions} />\n\n          {transactions !== null && (\n            <button\n              className=\"RampButton\"\n              disabled={isLoading}\n              onClick={async () => {\n                await loadAllTransactions(); // Load more transactions\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}