{"ast":null,"code":"var _jsxFileName = \"/Users/arjunkulkarni/Downloads/ramp-fe-challenge/src/components/InputSelect/index.tsx\",\n    _s = $RefreshSig$();\n\nimport Downshift from \"downshift\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport classNames from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Assuming Employee is a type\nconst EMPTY_EMPLOYEE = {\n  id: \"ALL\",\n  firstName: \"All\",\n  lastName: \"Employees\"\n}; // Define your 'All Employees' option\n\nexport function InputSelect(_ref) {\n  _s();\n\n  let {\n    label,\n    defaultValue,\n    onChange: consumerOnChange,\n    items,\n    parseItem,\n    isLoading,\n    loadingLabel\n  } = _ref;\n  const [selectedValue, setSelectedValue] = useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : null);\n  const [dropdownPosition, setDropdownPosition] = useState({\n    top: 0,\n    left: 0\n  });\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const onChange = useCallback(selectedItem => {\n    if (!selectedItem || selectedItem.id === EMPTY_EMPLOYEE.id) {\n      // If 'All Employees' is selected, pass null or another special value\n      consumerOnChange(null); // Ensure that `null` is passed when selecting \"All Employees\"\n    } else {\n      // Otherwise, proceed as normal\n      consumerOnChange(selectedItem);\n    }\n\n    setSelectedValue(selectedItem);\n  }, [consumerOnChange]);\n  const updateDropdownPosition = useCallback(target => {\n    const {\n      top,\n      left\n    } = target.getBoundingClientRect();\n    const {\n      scrollY\n    } = window;\n    setDropdownPosition({\n      top: scrollY + top + 63,\n      // Adjust 63 based on your dropdown's height or offset\n      left\n    });\n  }, []);\n  const handleScroll = useCallback(() => {\n    const selectedElement = document.getElementById(\"RampSelectButton\");\n\n    if (selectedElement) {\n      updateDropdownPosition(selectedElement);\n    }\n  }, [updateDropdownPosition]);\n  useEffect(() => {\n    if (isDropdownOpen) {\n      window.addEventListener(\"scroll\", handleScroll, {\n        passive: true\n      });\n    } else {\n      window.removeEventListener(\"scroll\", handleScroll);\n    }\n\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [isDropdownOpen, handleScroll]);\n  return /*#__PURE__*/_jsxDEV(Downshift, {\n    id: \"RampSelect\",\n    onChange: onChange,\n    selectedItem: selectedValue,\n    itemToString: item => item ? parseItem(item).label : \"\",\n    onStateChange: _ref2 => {\n      let {\n        isOpen\n      } = _ref2;\n      return setIsDropdownOpen(isOpen || false);\n    },\n    children: _ref3 => {\n      let {\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue\n      } = _ref3;\n      const toggleProps = getToggleButtonProps();\n      const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampInputSelect--root\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"RampText--s RampText--hushed\",\n          ...getLabelProps(),\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampBreak--xs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"RampSelectButton\",\n          className: \"RampInputSelect--input\",\n          onClick: event => {\n            updateDropdownPosition(event.target);\n            toggleProps.onClick(event);\n          },\n          children: inputValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classNames(\"RampInputSelect--dropdown-container\", {\n            \"RampInputSelect--dropdown-container-opened\": isOpen\n          }),\n          ...getMenuProps(),\n          style: {\n            top: dropdownPosition.top,\n            left: dropdownPosition.left\n          },\n          children: renderItems()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this);\n\n      function renderItems() {\n        if (!isOpen) {\n          return null;\n        }\n\n        if (isLoading) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"RampInputSelect--dropdown-item\",\n            children: [loadingLabel, \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 20\n          }, this);\n        }\n\n        if (items.length === 0) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"RampInputSelect--dropdown-item\",\n            children: \"No items\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 20\n          }, this);\n        }\n\n        return items.map((item, index) => {\n          const parsedItem = parseItem(item);\n          return /*#__PURE__*/_jsxDEV(\"div\", { ...getItemProps({\n              key: parsedItem.value,\n              index,\n              item,\n              className: classNames(\"RampInputSelect--dropdown-item\", {\n                \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n                \"RampInputSelect--dropdown-item-selected\": (parsedSelectedItem === null || parsedSelectedItem === void 0 ? void 0 : parsedSelectedItem.value) === parsedItem.value\n              })\n            }),\n            children: parsedItem.label\n          }, parsedItem.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this);\n        });\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InputSelect, \"i4GcN01ElrX1tN/W1Yh/IdsRxm0=\");\n\n_c = InputSelect;\n\nconst getDropdownPosition = target => {\n  if (target instanceof Element) {\n    const {\n      top,\n      left\n    } = target.getBoundingClientRect();\n    const {\n      scrollY\n    } = window;\n    return {\n      top: scrollY + top + 63,\n      // Adjust this value based on your dropdown's layout\n      left\n    };\n  }\n\n  return {\n    top: 0,\n    left: 0\n  };\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"InputSelect\");","map":{"version":3,"names":["Downshift","useCallback","useEffect","useState","classNames","EMPTY_EMPLOYEE","id","firstName","lastName","InputSelect","label","defaultValue","onChange","consumerOnChange","items","parseItem","isLoading","loadingLabel","selectedValue","setSelectedValue","dropdownPosition","setDropdownPosition","top","left","isDropdownOpen","setIsDropdownOpen","selectedItem","updateDropdownPosition","target","getBoundingClientRect","scrollY","window","handleScroll","selectedElement","document","getElementById","addEventListener","passive","removeEventListener","item","isOpen","getItemProps","getLabelProps","getMenuProps","highlightedIndex","getToggleButtonProps","inputValue","toggleProps","parsedSelectedItem","event","onClick","renderItems","length","map","index","parsedItem","key","value","className","getDropdownPosition","Element"],"sources":["/Users/arjunkulkarni/Downloads/ramp-fe-challenge/src/components/InputSelect/index.tsx"],"sourcesContent":["import Downshift from \"downshift\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport classNames from \"classnames\";\nimport { DropdownPosition, GetDropdownPositionFn, InputSelectOnChange, InputSelectProps, Employee } from \"./types\"; // Assuming Employee is a type\n\nconst EMPTY_EMPLOYEE: Employee = { id: \"ALL\", firstName: \"All\", lastName: \"Employees\" }; // Define your 'All Employees' option\n\nexport function InputSelect<TItem>({\n  label,\n  defaultValue,\n  onChange: consumerOnChange,\n  items,\n  parseItem,\n  isLoading,\n  loadingLabel,\n}: InputSelectProps<TItem>) {\n  const [selectedValue, setSelectedValue] = useState<TItem | null>(defaultValue ?? null);\n  const [dropdownPosition, setDropdownPosition] = useState<DropdownPosition>({\n    top: 0,\n    left: 0,\n  });\n\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n\n  const onChange = useCallback<InputSelectOnChange<TItem>>(\n    (selectedItem) => {\n      if (!selectedItem || (selectedItem as any).id === EMPTY_EMPLOYEE.id) {\n        // If 'All Employees' is selected, pass null or another special value\n        consumerOnChange(null); // Ensure that `null` is passed when selecting \"All Employees\"\n      } else {\n        // Otherwise, proceed as normal\n        consumerOnChange(selectedItem);\n      }\n      setSelectedValue(selectedItem);\n    },\n    [consumerOnChange]\n  );\n\n  const updateDropdownPosition = useCallback((target: HTMLElement) => {\n    const { top, left } = target.getBoundingClientRect();\n    const { scrollY } = window;\n    setDropdownPosition({\n      top: scrollY + top + 63, // Adjust 63 based on your dropdown's height or offset\n      left,\n    });\n  }, []);\n\n  const handleScroll = useCallback(() => {\n    const selectedElement = document.getElementById(\"RampSelectButton\");\n    if (selectedElement) {\n      updateDropdownPosition(selectedElement);\n    }\n  }, [updateDropdownPosition]);\n\n  useEffect(() => {\n    if (isDropdownOpen) {\n      window.addEventListener(\"scroll\", handleScroll, { passive: true });\n    } else {\n      window.removeEventListener(\"scroll\", handleScroll);\n    }\n\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [isDropdownOpen, handleScroll]);\n\n  return (\n    <Downshift<TItem>\n      id=\"RampSelect\"\n      onChange={onChange}\n      selectedItem={selectedValue}\n      itemToString={(item) => (item ? parseItem(item).label : \"\")}\n      onStateChange={({ isOpen }) => setIsDropdownOpen(isOpen || false)}\n    >\n      {({\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue,\n      }) => {\n        const toggleProps = getToggleButtonProps();\n        const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem);\n\n        return (\n          <div className=\"RampInputSelect--root\">\n            <label className=\"RampText--s RampText--hushed\" {...getLabelProps()}>\n              {label}\n            </label>\n            <div className=\"RampBreak--xs\" />\n            <div\n              id=\"RampSelectButton\"\n              className=\"RampInputSelect--input\"\n              onClick={(event) => {\n                updateDropdownPosition(event.target as HTMLElement);\n                toggleProps.onClick(event);\n              }}\n            >\n              {inputValue}\n            </div>\n\n            <div\n              className={classNames(\"RampInputSelect--dropdown-container\", {\n                \"RampInputSelect--dropdown-container-opened\": isOpen,\n              })}\n              {...getMenuProps()}\n              style={{ top: dropdownPosition.top, left: dropdownPosition.left }}\n            >\n              {renderItems()}\n            </div>\n          </div>\n        );\n\n        function renderItems() {\n          if (!isOpen) {\n            return null;\n          }\n\n          if (isLoading) {\n            return <div className=\"RampInputSelect--dropdown-item\">{loadingLabel}...</div>;\n          }\n\n          if (items.length === 0) {\n            return <div className=\"RampInputSelect--dropdown-item\">No items</div>;\n          }\n\n          return items.map((item, index) => {\n            const parsedItem = parseItem(item);\n            return (\n              <div\n                key={parsedItem.value}\n                {...getItemProps({\n                  key: parsedItem.value,\n                  index,\n                  item,\n                  className: classNames(\"RampInputSelect--dropdown-item\", {\n                    \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n                    \"RampInputSelect--dropdown-item-selected\":\n                      parsedSelectedItem?.value === parsedItem.value,\n                  }),\n                })}\n              >\n                {parsedItem.label}\n              </div>\n            );\n          });\n        }\n      }}\n    </Downshift>\n  );\n}\n\nconst getDropdownPosition: GetDropdownPositionFn = (target) => {\n  if (target instanceof Element) {\n    const { top, left } = target.getBoundingClientRect();\n    const { scrollY } = window;\n    return {\n      top: scrollY + top + 63, // Adjust this value based on your dropdown's layout\n      left,\n    };\n  }\n\n  return { top: 0, left: 0 };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}